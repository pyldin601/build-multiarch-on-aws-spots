name: Build multiarch docker image on AWS spot instances

on:
  workflow_call:
    inputs:
      DOCKER_IMAGE_NAME:
        type: string
        required: false
        default: ${{ github.repository }}
      DOCKER_IMAGE_TAG:
        type: string
        required: false
        default: latest
      REPOSITORY_URL:
        type: string
        required: false
        default: https://github.com/${{ github.repository }}.git
      CHECKOUT:
        type: string
        required: false
        default: ${{ github.sha }}
      WORKFLOW_REPOSITORY:
        type: string
        required: false
        default: pyldin601/build-multiarch-on-aws-spots
      WORKFLOW_CHECKOUT:
        type: string
        required: false
        default: main
      AWS_REGION:
        type: string
        required: false
        default: eu-central-1
      AWS_EC2_INSTANCE_SIZE:
        type: string
        required: false
        default: xlarge
      BUILD_CONTEXT:
        type: string
        required: false
        default: .
      BUILD_DOCKERFILE:
        type: string
        required: false
        default: ./Dockerfile
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

env:
  TERRAFORM_DIR: terraform

jobs:
  spawn-spots:
    name: Spawn spot machines
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_docker_login: ${{ secrets.DOCKERHUB_USERNAME }}
      TF_VAR_docker_password: ${{ secrets.DOCKERHUB_TOKEN }}
      TF_VAR_aws_ec2_key_pair_name: kp_${{ github.repository }}-${{ github.ref }}-${{ github.run_number }}
      TF_VAR_aws_ec2_security_group_name: sg_${{ github.repository }}-${{ github.ref }}-${{ github.run_number }}
      TF_VAR_aws_ec2_instance_size: ${{ inputs.AWS_EC2_INSTANCE_SIZE }}
      TF_VAR_aws_region: ${{ inputs.AWS_REGION }}
    outputs:
      PUBLIC_IPS: ${{ env.PUBLIC_IPS }}
      PRIVATE_KEY: ${{ env.PRIVATE_KEY }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@master
        with:
          repository: ${{ inputs.WORKFLOW_REPOSITORY }}
          ref: ${{ inputs.WORKFLOW_CHECKOUT }}
      -
        name: "Terraform: Setup"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.1.5
          terraform_wrapper: false
      -
        name: "Terraform: Init"
        run: terraform -chdir=$TERRAFORM_DIR init
      -
        name: "Terraform: Apply"
        run: terraform -chdir=$TERRAFORM_DIR apply -auto-approve
      -
        name: "Save Terraform State File"
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: terraform-state
          path: ${{ env.TERRAFORM_DIR }}/terraform.tfstate
          retention-days: 1
      -
        id: outputs
        name: "Terraform: Parse Outputs"
        run: |
          PRIVATE_KEY=$(terraform -chdir=$TERRAFORM_DIR output private_key)
          PUBLIC_IPS=$(terraform -chdir=$TERRAFORM_DIR output --json public_ips)

          echo "PRIVATE_KEY<<EOF" >> $GITHUB_ENV
          echo "$PRIVATE_KEY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "PUBLIC_IPS<<EOF" >> $GITHUB_ENV
          echo "$PUBLIC_IPS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

  build:
    name: Build and push image (${{ matrix.PUBLIC_IP }}) # @todo Show arch in job name
    runs-on: ubuntu-latest
    needs:
      - spawn-spots
    strategy:
      matrix:
        PUBLIC_IP: ${{ fromJSON(needs.spawn-spots.outputs.PUBLIC_IPS) }}
    env:
      PUBLIC_IP: ${{ matrix.PUBLIC_IP }}
      REPOSITORY_URL: ${{ inputs.REPOSITORY_URL }}
      CHECKOUT: ${{ inputs.CHECKOUT }}
      IMAGE_NAME: ${{ inputs.DOCKER_IMAGE_NAME }}
      IMAGE_TAG: ${{ inputs.DOCKER_IMAGE_TAG }}
      BUILD_CONTEXT: ${{ inputs.BUILD_CONTEXT }}
      BUILD_DOCKERFILE: ${{ inputs.BUILD_DOCKERFILE }}
    steps:
      -
        name: Setup SSH client
        run: |
          mkdir -p ~/.ssh/
          echo "$PRIVATE_KEY" > ~/.ssh/private.key
          chmod 600 ~/.ssh/private.key
          cat >>~/.ssh/config <<END
          Host spot
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/private.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ubuntu
          SSH_HOST: ${{ env.PUBLIC_IP }}
          PRIVATE_KEY: ${{ needs.spawn-spots.outputs.PRIVATE_KEY }}
      -
        name: Checkout on spot instance
        run: ssh spot "mkdir ~/code && git clone \"$REPOSITORY_URL\" ~/code && cd ~/code && git checkout \"$CHECKOUT\""
      -
        name: Build docker image on spot instance
        run: ssh spot "cd ~/code && sudo docker build -t \"$IMAGE_NAME:$IMAGE_TAG-"'$(dpkg --print-architecture)'"\" -f $BUILD_DOCKERFILE $BUILD_CONTEXT"
      -
        name: Push docker image from spot instance
        run: ssh spot "sudo docker push \"$IMAGE_NAME:$IMAGE_TAG-"'$(dpkg --print-architecture)'"\""

  manifest:
    name: Create and push multi-arch manifest
    runs-on: ubuntu-latest
    needs:
      - spawn-spots
      - build
    env:
      PUBLIC_IP: ${{ fromJSON(needs.spawn-spots.outputs.PUBLIC_IPS)[0] }}
      REPOSITORY_URL: ${{ inputs.REPOSITORY_URL }}
      CHECKOUT: ${{ inputs.CHECKOUT }}
      IMAGE_NAME: ${{ inputs.DOCKER_IMAGE_NAME }}
      IMAGE_TAG: ${{ inputs.DOCKER_IMAGE_TAG }}
    steps:
      -
        name: Setup SSH client
        run: |
          mkdir -p ~/.ssh/
          echo "$PRIVATE_KEY" > ~/.ssh/private.key
          chmod 600 ~/.ssh/private.key
          cat >>~/.ssh/config <<END
          Host spot
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/private.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ubuntu
          SSH_HOST: ${{ env.PUBLIC_IP }}
          PRIVATE_KEY: ${{ needs.spawn-spots.outputs.PRIVATE_KEY }}
      -
        name: Create multi-arch docker manifest
        # @todo Take x86_64 and aarch64 as variables from previous steps
        run: ssh spot "sudo docker manifest create \"$IMAGE_NAME:$IMAGE_TAG\" --amend \"$IMAGE_NAME:$IMAGE_TAG-amd64\" --amend \"$IMAGE_NAME:$IMAGE_TAG-arm64\""
      -
        name: Push docker manifest
        run: ssh spot "sudo docker manifest push \"$IMAGE_NAME:$IMAGE_TAG\""

  destroy-spots:
    name: Destroy spot machines
    runs-on: ubuntu-latest
    needs:
      - spawn-spots
      - build
      - manifest
    if: ${{ always() }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_docker_login: ${{ secrets.DOCKERHUB_USERNAME }}
      TF_VAR_docker_password: ${{ secrets.DOCKERHUB_TOKEN }}
      TF_VAR_aws_ec2_key_pair_name: ${{ github.repository }}@${{ github.sha }}
      TF_VAR_aws_ec2_security_group_name: sg_${{ github.repository }}@${{ github.sha }}
      TF_VAR_aws_ec2_instance_size: ${{ inputs.AWS_EC2_INSTANCE_SIZE }}
      TF_VAR_aws_region: ${{ inputs.AWS_REGION }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@master
        with:
          repository: ${{ inputs.WORKFLOW_REPOSITORY }}
          ref: ${{ inputs.WORKFLOW_CHECKOUT }}
      -
        name: "Download Terraform State File"
        uses: actions/download-artifact@v2
        with:
          name: terraform-state
          path: ${{ env.TERRAFORM_DIR }}
      -
        name: "Terraform: Setup"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.1.5
          terraform_wrapper: false
      -
        name: "Terraform: Init"
        run: terraform -chdir=$TERRAFORM_DIR init
      -
        name: "Terraform: Destroy"
        run: terraform -chdir=$TERRAFORM_DIR destroy -auto-approve
